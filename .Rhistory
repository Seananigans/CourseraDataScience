head(BodyWeight)
levels(BodyWeight$Rat)
levels(BodyWeight$Diet)
ggplot(data.Rna, aes(date, steps))
+ geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7)
+ facet_grid(. ~ month, scales = "free")
+ labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
library(ggplot2)
ggplot(data.Rna, aes(date, steps))
+ geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7)
+ facet_grid(. ~ month, scales = "free")
+ labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(data.Rna, aes(date, steps))
+ geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7)
ggplot(data.Rna, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7)
ggplot(data.Rna, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free")
ggplot(data.Rna, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
hist(totalStepsDaily)
hist(totalStepsDaily$x)
?hist
totalStepsDaily
names(totalStepsDaily) <- c("date","steps")
totalStepsDaily
hist(totalStepsDaily$steps,break="date")
hist(totalStepsDaily$steps,break="totalStepsDaily$date")
hist(totalStepsDaily$steps,breaks="totalStepsDaily$date)
""
)
"")
hist(totalStepsDaily$steps,breaks="totalStepsDaily$date")
hist(totalStepsDaily$steps,breaks=totalStepsDaily$date)
hist(totalStepsDaily$steps,breaks=date)
hist(totalStepsDaily$steps,breaks="date")
barplot(steps.date$steps, names.arg = steps.date$date, xlab = "date", ylab = "steps")
barplot(totalStepsDaily$steps, names.arg = totalStepsDaily$date, xlab = "date", ylab = "steps")
intervalSteps <- aggregate(data.Rna$steps,by=list(data.Rna$date), FUN = mean)
plot(intervalSteps,"l")
plot(intervalSteps,type="l")
intervalSteps <- aggregate(data.Rna$steps,by=list(data.Rna$interval), FUN = mean)
plot(intervalSteps,type="l")
intervalSteps <- aggregate(data.Rna$steps,by=data.Rna$interval, FUN = mean)
(
)
intervalSteps <- aggregate(data.Rna$steps,by=list(data.Rna$interval), FUN = mean)
plot(type = "l", intervalSteps)
intervalSteps <- aggregate(steps~interval, data = data.Rna, FUN = mean)
plot(type = "l", intervalSteps)
intervalSteps <- aggregate(steps~interval, data = data, FUN = mean)
plot(type = "l", intervalSteps)
intervalSteps <- aggregate(steps~interval, data = data, FUN = "mean")
plot(type = "l", intervalSteps)
intervalSteps$interval[which.max(intervalSteps$steps)]
intervalSteps <- aggregate(steps~interval, data = data, FUN = mean)
plot(type = "l", intervalSteps)
steps.interval <- aggregate(steps ~ interval, data = data, FUN = mean)
plot(steps.interval, type = "l")
detach("package:lattice", unload=TRUE)
plot(steps.interval, type = "l")
intervalSteps <- aggregate(steps~interval, data = data, FUN = mean)
plot(type = "l", intervalSteps)
?order
intervalSteps <- intervalSteps[order(interval),]
names(intervalSteps)
intervalSteps <- intervalSteps[order("interval"),]
plot(type = "l", intervalSteps)
intervalSteps <- aggregate(steps~interval, data = data, FUN = mean)
head(intervalSteps)
order(intervalSteps)
order(intervalSteps$interval)
intervalSteps <- intervalSteps[order(intervalSteps$interval),]
plot(type = "l", intervalSteps)
intervalSteps <- aggregate(steps~as.numeric(interval), data = data, FUN = mean)
plot(type = "l", intervalSteps)
intervalSteps <- aggregate(steps~as.numeric(interval), data = data.Rna, FUN = mean)
plot(type = "l", intervalSteps)
intervalSteps <- aggregate(steps~as.numeric(as.character(interval)), data = data.Rna, FUN = mean)
plot(type = "l", intervalSteps)
intervalSteps$interval[max(steps)]
intervalSteps$interval[max(intervalSteps$steps)]
intervalSteps$interval[which.max(intervalSteps$steps)]
max(intervalSteps$steps)
intervalSteps[intervalSteps$steps==max(intervalSteps$steps)]
intervalSteps[intervalSteps$steps==max(intervalSteps$steps),]
intervalSteps$interval[intervalSteps$steps==max(intervalSteps$steps),]
intervalSteps$as.numeric(as.character(interval))[intervalSteps$steps==max(intervalSteps$steps),]
intervalSteps[intervalSteps$steps==max(intervalSteps$steps),]
sapply(intervalSteps,class)
names(intervalSteps)<-c("interval","steps")
plot(type = "l", intervalSteps)
intervalSteps$interval[which.max(intervalSteps$steps)]
```
sum(is.na(data))
?na.omit
dataWithMean <- data
intervalSteps
dataWithMean <- for (i in 1:nrow(data)) {
if (is.na(data$steps[i])) {
data$steps[i] <- intervalSteps[which(data$interval[i] == intervalSteps$interval), ]$steps
}
}
intervalSteps[intervalSteps$steps==max(intervalSteps$steps),]
dataWithMean <- for (i in 1:nrow(data)) {
if (is.na(data$steps[i])) {
data$steps[i] <- intervalSteps$steps[which(data$interval[i] == intervalSteps$interval), ]
}
}
dataWithMean <- for (i in 1:nrow(data)) {
if (is.na(data$steps[i])) {
dataWithMean$steps[i] <- intervalSteps$steps[which(data$interval[i] == intervalSteps$interval), ]
}
}
View(data)
data <- read.csv("activity.csv", colClasses = c("integer","Date","factor"))
data.Rna <- na.omit(data)
dailySteps <- aggregate(data.Rna$steps,by = list(data.Rna$date), FUN=sum)
names(dailySteps) <- c("date","steps")
barplot(dailySteps$steps, names.arg = dailySteps$date, xlab = "date", ylab = "steps")
mean(dailySteps$steps)
median(dailySteps$steps)
intervalSteps <- aggregate(steps~as.numeric(as.character(interval)), data = data.Rna, FUN = mean)
names(intervalSteps)<-c("interval","steps")
plot(type = "l", intervalSteps)
intervalSteps$interval[which.max(intervalSteps$steps)]
sum(is.na(data))
dataWithMean <- data
dataWithMean <- for (i in 1:nrow(data)) {
if (is.na(data$steps[i])) {
dataWithMean$steps[i] <- intervalSteps$steps[which(data$interval[i] == intervalSteps$interval), ]
}
}
View(dataWithMean)
activity <- merge(data, intervalSteps, by = "interval", suffixes = c("",".y"))
head(activity)
data.intMean <- merge(data, intervalSteps, by = "interval", suffixes = c("",
".intMean"))
NAs <- is.na(data.intMean$steps)
data.intMean$steps[NAs] <- data.intMean$steps.intMean[NAs]
data.intMean <- data.intMean[, c(1:3)]
View(dataWithMean)
View(data.intMean)
+ Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
?aggregate
dailySteps2 <- aggregate(steps ~ date, data.intMean, sum)
barplot(dailySteps2$steps, names.arg = dailySteps2$date, xlab = "date", ylab = "steps")
mean(dailySteps2$steps)
median(dailySteps2$steps)
plot(type = "l", intervalSteps, xlab = "Interval in Minutes")
plot(type = "l", intervalSteps, main = "Average Steps per Time Interval",
xlab = "Interval in Minutes", ylab = "Steps")
day <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {
"weekend"
} else {
"weekday"
}
}
data.intMean$day <- as.factor(sapply(data.intMean$date, day))
View(data.intMean)
par(mfrow = c(2, 1))
for (type in c("weekend", "weekday")) {
steps.type <- aggregate(steps ~ interval, data = data.intMean, subset = data.intMean$day == type, FUN = mean)
plot(steps.type, type = "l", main = type)
}
for (type in c("weekend", "weekday")) {
steps.type <- aggregate(steps ~ as.numeric(as.character(interval)), data = data.intMean, subset = data.intMean$day == type, FUN = mean)
plot(steps.type, type = "l", main = type)
}
for (type in c("weekend", "weekday")) {
steps.type <- aggregate(steps ~ as.numeric(as.character(interval)), data = data.intMean, subset = data.intMean$day == type, FUN = mean)
plot(steps.type, type = "l", main = type, xlab="interval")
}
par(mfrow = c(2, 1))
for (type in c("weekend", "weekday")) {
dayType <- aggregate(steps ~ as.numeric(as.character(interval)),
data = data.intMean,
subset = data.intMean$day == type,
FUN = mean)
plot(dayType, type = "l", main = type,
xlab = "Interval in Minutes", ylab = "Steps")
}
par(mfrow = c(2, 1))
for (type in c("weekend", "weekday")) {
dayType <- aggregate(steps ~ as.numeric(as.character(interval)),
data = data.intMean,
subset = data.intMean$day == type,
FUN = mean)
plot(dayType, type = "l", main = type,
xlab = "Interval in Minutes", ylab = "Steps", color = type)
}
library(lattice)
xyplot(data.intMean$steps ~ data.intMean$interval | data.intMean$day,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps")
data.intMean$interval<- as.numeric(as.character(data.intMean$interval))
xyplot(data.intMean$steps ~ data.intMean$interval | data.intMean$day,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps")
par(mfrow = c(2, 1))
for (type in c("weekend", "weekday")) {
dayType <- aggregate(steps ~ as.numeric(as.character(interval)),
data = data.intMean,
subset = data.intMean$day == type,
FUN = mean)
plot(dayType, type = "l", main = type,
xlab = "Interval in Minutes", ylab = "Steps")
}
par(mfrow = c(2, 1))
for (type in c("weekend", "weekday")) {
dayType <- aggregate(steps ~ as.numeric(as.character(interval)),
data = data.intMean,
subset = data.intMean$day == type,
FUN = mean)
plot(dayType, type = "l", main = type,
xlab = "Interval in Minutes", ylab = "Steps", yrange = 200)
}
?plot
table(data.intMean$day)
intervalSteps$interval[max(intervalSteps$steps)]
intervalSteps$interval[which.max(intervalSteps$steps)]
maxAverageSteps <- intervalSteps[intervalSteps$steps==max(intervalSteps$steps),]
maxAverageSteps
maxAverageSteps[,c(1:2)]
?ifelse
intervalSteps <- aggregate(steps~interval), data = data.Rna, FUN = mean)
names(intervalSteps)<-c("interval","steps")
plot(type = "l", intervalSteps, main = "Average Steps per Time Interval",
xlab = "Interval in Minutes", ylab = "Steps")
dailySteps <- aggregate(steps~date, data = data.Rna, FUN=sum)
names(dailySteps) <- c("date","steps")
barplot(dailySteps$steps, names.arg = dailySteps$date, xlab = "date", ylab = "steps")
?panel
??panel
?lines
?axes
?llines
?text
?axis
```r
main = "Frequency of Tracked Storms since 1950"
echo = TRUE
options(scipen = 1)
library(R.utils)
library(ggplot2)
library(plyr)
require(gridExtra)
if (!"stormData.csv.bz2" %in% dir("./data/")) {
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile = "data/stormData.csv.bz2")
bunzip2("data/stormData.csv.bz2", overwrite=T, remove=F)
}
if (!"stormData" %in% ls()) {
stormData <- read.csv("data/stormData.csv", sep = ",")
}
if (dim(stormData)[2] == 37) {
stormData$year <- as.numeric(format(as.Date(stormData$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
}
if (!"stormData.csv.bz2" %in% dir("./data/")) {
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile = "data/stormData.csv.bz2")
bunzip2("data/stormData.csv.bz2", overwrite=T, remove=F)
}
if (!"stormData" %in% ls()) {
stormData <- read.csv("data/stormData.csv", sep = ",")
}
if (dim(stormData)[2] == 37) {
stormData$year <- as.numeric(format(as.Date(stormData$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
}
setwd("~/Desktop/DataScience/RepResearch/RepData_PeerAssessment2-master")
if (!"stormData.csv.bz2" %in% dir("./data/")) {
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile = "data/stormData.csv.bz2")
bunzip2("data/stormData.csv.bz2", overwrite=T, remove=F)
}
if (!"stormData" %in% ls()) {
stormData <- read.csv("data/stormData.csv", sep = ",")
}
if (dim(stormData)[2] == 37) {
stormData$year <- as.numeric(format(as.Date(stormData$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
}
setwd("~/Desktop/DataScience/ExploreData/Project2")
setwd("~/Desktop/DataScience/ExploreData/Project2")
setwd("~/Desktop/DataScience/ExploreData/Project2")
source(load_data.R)
# if (!"load_data.R" %in% list.files()) {
#     setwd("~/Desktop/Online Coursera/Coursera-Exploratory-Data-Analysis/ExData_Plotting2/")
# }
# source("load_data.R")
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./figure/plot1.png",
width = 480, height = 480,
units = "px")
totalEmissions <- aggregate(neiData$Emissions, list(neiData$year), FUN = "sum")
# options(scipen=0)
# options(scipen=999)
plot(totalEmissions, type = "l", xlab = "Year",
main = "Total Emissions in the United States from 1999 to 2008",
ylab = expression('Total PM'[2.5]*" Emission"))
dev.off()
source(load_data.R)
source("load_data.R")
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./figure/plot1.png",
width = 480, height = 480,
units = "px")
totalEmissions <- aggregate(neiData$Emissions, list(neiData$year), FUN = "sum")
# options(scipen=0)
# options(scipen=999)
plot(totalEmissions, type = "l", xlab = "Year",
main = "Total Emissions in the United States from 1999 to 2008",
ylab = expression('Total PM'[2.5]*" Emission"))
dev.off()
if (!"neiData" %in% ls()) {
neiData <- readRDS("./data/summarySCC_PM25.rds")
}
if (!"sccData" %in% ls()) {
sccData <- readRDS("./data/Source_Classification_Code.rds")
}
subset <- neiData[neiData$fips == "24510", ]
# if (!"load_data.R" %in% list.files()) {
#     setwd("~/Desktop/Online Coursera/Coursera-Exploratory-Data-Analysis/ExData_Plotting2/")
# }
# source("load_data.R")
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./figure/plot2.png",
width = 480, height = 480,
units = "px")
totalEmissions <- aggregate(subset$Emissions, list(subset$year), FUN = "sum")
# options(scipen=0)
# options(scipen=999)
plot(totalEmissions, type = "l", xlab = "Year",
main = "Total Emissions in Baltimore City from 1999 to 2008",
ylab = expression('Total PM'[2.5]*" Emission"))
dev.off()
# Check if both data exist in the environment. If not, load the data.
if (!"neiData" %in% ls()) {
neiData <- readRDS("./data/summarySCC_PM25.rds")
}
if (!"sccData" %in% ls()) {
sccData <- readRDS("./data/Source_Classification_Code.rds")
}
subset <- neiData[neiData$fips == "24510", ]
# if (!"load_data.R" %in% list.files()) {
#     setwd("~/Desktop/Online Coursera/Coursera-Exploratory-Data-Analysis/ExData_Plotting2/")
# }
# source("load_data.R")
library(ggplot2)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./figure/plot3.png",
width = 480, height = 480,
units = "px")
g <- ggplot(subset, aes(year, Emissions, color = type))
g + geom_line(stat = "summary", fun.y = "sum") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle("Total Emissions in Baltimore City from 1999 to 2008")
dev.off()
if (!"neiData" %in% ls()) {
neiData <- readRDS("./data/summarySCC_PM25.rds")
}
if (!"sccData" %in% ls()) {
sccData <- readRDS("./data/Source_Classification_Code.rds")
}
subset <- neiData[neiData$fips == "24510", ]
library(ggplot2)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./figure/plot3.png",
width = 480, height = 480,
units = "px")
g <- ggplot(subset, aes(year, Emissions, color = type))
g + geom_line(stat = "summary", fun.y = "sum") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle("Total Emissions in Baltimore City from 1999 to 2008")
dev.off()
if (!"neiData" %in% ls()) {
neiData <- readRDS("./data/summarySCC_PM25.rds")
}
if (!"sccData" %in% ls()) {
sccData <- readRDS("./data/Source_Classification_Code.rds")
}
head(sccData$Short.Name)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./figure/plot4.png",
width = 480, height = 480,
units = "px")
coal <- grep("coal", sccData$Short.Name, ignore.case = T)
coal <- sccData[coal, ]
coal <- neiData[neiData$SCC %in% coal$SCC, ]
coalEmissions <- aggregate(coal$Emissions, list(coal$year), FUN = "sum")
# options(scipen=0)
# options(scipen=999)
plot(coalEmissions, type = "l", xlab = "Year",
main = "Total Emissions From Coal Combustion-related\n Sources from 1999 to 2008",
ylab = expression('Total PM'[2.5]*" Emission"))
dev.off()
if (!"neiData" %in% ls()) {
neiData <- readRDS("./data/summarySCC_PM25.rds")
}
if (!"sccData" %in% ls()) {
sccData <- readRDS("./data/Source_Classification_Code.rds")
}
subset <- neiData[neiData$fips == "24510", ]
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./figure/plot5.png",
width = 480, height = 480,
units = "px")
motor <- grep("motor", sccData$Short.Name, ignore.case = T)
motor <- sccData[motor, ]
motor <- subset[subset$SCC %in% motor$SCC, ]
motorEmissions <- aggregate(motor$Emissions, list(motor$year), FUN = "sum")
plot(motorEmissions, type = "l", xlab = "Year",
main = "Total Emissions From Motor Vehicle Sources\n from 1999 to 2008 in Baltimore City",
ylab = expression('Total PM'[2.5]*" Emission"))
dev.off()
# Check if both data exist in the environment. If not, load the data.
if (!"neiData" %in% ls()) {
neiData <- readRDS("./data/summarySCC_PM25.rds")
}
if (!"sccData" %in% ls()) {
sccData <- readRDS("./data/Source_Classification_Code.rds")
}
subset <- neiData[neiData$fips == "24510"|neiData$fips == "06037", ]
library(ggplot2)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./figure/plot6.png",
width = 480, height = 480,
units = "px", bg = "transparent")
motor <- grep("motor", sccData$Short.Name, ignore.case = T)
motor <- sccData[motor, ]
motor <- subset[subset$SCC %in% motor$SCC, ]
g <- ggplot(motor, aes(year, Emissions, color = fips))
g + geom_line(stat = "summary", fun.y = "sum") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle("Comparison of Total Emissions From Motor\n Vehicle Sources in Baltimore City\n and Los Angeles County from 1999 to 2008") +
scale_colour_discrete(name = "Group", label = c("Los Angeles","Baltimore"))
dev.off()
setwd("~/Desktop/DataScience/RepResearch/RepData_PeerAssessment2-master")
# download file from URL
if (!file.exists("c:/coursera/storm.csv.bz2")) {
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
"c:/coursera/storm.csv.bz2")
}
# download file from URL
if (!file.exists("c:/coursera/storm.csv.bz2")) {
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", "c:/coursera/storm.csv.bz2")
}
# unzip
# download file from URL
if (!file.exists("c:/coursera/storm.csv.bz2")) {
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", "c:/coursera/storm.csv.bz2")
}
if (!"stormData.csv.bz2" %in% dir("./data/")) {
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile = "data/stormData.csv.bz2")
bunzip2("data/stormData.csv.bz2", overwrite=T, remove=F)
}
if (!"stormData" %in% ls()) {
stormData <- read.csv("data/stormData.csv", sep = ",")
}
if (dim(stormData)[2] == 37) {
stormData$year <- as.numeric(format(as.Date(stormData$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
}
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile = "data/stormData.csv.bz2")
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
swirl()
setwd("~/Desktop/PracticeAssignment/diet_data")
dir()
x <- data.frame()
for (i in dir()){rbind(x,read.csv(i))}
for (i in dir()){x <- rbind(x,read.csv(i))}
View(x)
with(x, plot(Age, Weight))
with(x, plot(Age, Weight))
mfrow=1
with(x, plot(Age, Weight))
rm(mfrow)
par(mfrow=c(1,1))
with(x, plot(Age, Weight))
with(x, plot(Day, Weight))
library(ggplot2)
ggplot(x, aes(x=Day,y=Weight))+
geom_line()
ggplot(x, aes(x=Day,y=Weight))+
geom_line()+
facet_grid(Patient.Name)
ggplot(x, aes(x=Day,y=Weight))+
geom_line()+
facet_grid(Patient.Name~.)
ggplot(x, aes(x=Day,y=Weight))+
geom_line()+
facet_grid(.~Patient.Name)
ggplot(x, aes(x=Day,y=Weight))+
geom_line()+
facet_grid(vs~am)
p <- ggplot(x, aes(x=Day,y=Weight))+
geom_line()+
facet_grid(.~Patient.Name)
p
p <- ggplot(x, aes(x=Day,y=Weight))+
geom_line()
p + facet_grid(.~Patient.Name, scales = "free")
p <- ggplot(x, aes(x=Day,y=Weight), color=factor(Patient.Name))+
geom_line()+
facet_grid(.~Patient.Name)
p
p <- ggplot(x, aes(x=Day,y=Weight), colour=factor(Patient.Name))+
geom_line()+
facet_grid(.~Patient.Name)
p
setwd("~/Desktop/DataScience")
u<-[4,-4,-3]
u<-c(4,-4,-3)
u
v<-c(4,2,4)
u*v
u%*%v
